BiocManager::install("SPIAT")
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")}
devtools::install_github("TrigosTeam/SPIAT")
library(SPIAT)
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/CPPN.xlsx")
library(survMisc)
library(survival)
library(jskm)
library(survey)
library(survminer)
library(survival)
library(ggplot2)
library(ggfortify)
library(readxl)
library(survival)
library(survminer)
library(flexsurv)
library(dplyr)
library(survtools)
library(finalfit)
library(gtsummary)
library(readxl)
library(tidyverse)
library(DescTools)
library(lme4)
library(broom.mixed)
library(kableExtra)
library(xtable)
library(emmeans)
library(ggsci)
library(superdiag)
library(mcmcplots)
library(gridExtra)
library(plyr)
library(forcats)
library(gghighlight)
library(dplyr)
library(ggplot2)
library(readxl)
library(survival)
library(survminer)
library(flexsurv)
library(survtools)
library(finalfit)
library(gtsummary)
library(tidyverse)
library(ggfortify)
library(ggplot2)
library(ggspectra)
library(ggrepel)
library(survival)
library(ranger)
library(dplyr)
library(ggfortify)
library(tidyverse)
library(tidytidbits)
library(survivalAnalysis)
Status = data$`SurvivalTime`
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/CPPN.xlsx")
Status = data$`censor`
Day = data$`SurvivalTime`
coxfit <- coxph(Surv(Day, Status))
coxfit <- coxph(Surv(Day, Status),data = data)
summary(coxfit)
Status = data$`censor`
Day = data$`SurvivalTime`
coxfit <- coxph(Surv(Day, Status),data = data)
summary(coxfit)
fit <- survfit(Surv(Days, Censor), data=data)
fit <- survfit(Surv(Day, Status), data=data)
data$censor
data$SurvivalTime
fit <- survfit(Surv(Day, Status)~PrimaryDx, data=data)
fit
surv_median(fit)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
fit <- survfit(Surv(Day, Status)~censor, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
fit <- survfit(Surv(Day, Status)~Grade, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
coxfit <- coxph(Surv(Day, Status)~Grade,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
coxfit <- coxph(Surv(Day, Status)~PrimaryDx,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
fit <- survfit(Surv(Day, Status)~PrimaryDx, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
Surv(Day, Status)
fit <- Surv(Day, Status)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
fit <- survfit(Surv(Day, Status)~PrimaryDx, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
fit <- survfit(Surv(Day, Status), data=data)
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/CPPN.xlsx",
col_names = FALSE)
View(data)
fit <- survfit(Surv(Day, Status)~all, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/CPPN.xlsx",
col_names = FALSE)
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/CPPN.xlsx",
col_names = T)
Status = data$`censor`
Day = data$`SurvivalTime`
fit <- survfit(Surv(Day, Status)~all, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
coxfit <- coxph(Surv(Day, Status)~PrimaryDx,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
fit <- survfit(Surv(Day, Status)~PrimaryDx, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
data <- data %>%  mutate(Family = as.character(family),
PrimaryDx = as.ordered(PrimaryDx))#,
data <- data %>%  mutate(Grade = as.ordered(Grade),
PrimaryDx = as.ordered(PrimaryDx))#,
Status = data$`censor`
Day = data$`SurvivalTime`
fit <- survfit(Surv(Day, Status)~all, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
fit <- survfit(Surv(Day, Status)~PrimaryDx, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
coxfit <- coxph(Surv(Day, Status)~PrimaryDx,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
coxfit <- coxph(Surv(Day, Status)~Grade,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
data <- data %>%  mutate(Grade = as.character(Grade),
PrimaryDx = as.character(PrimaryDx))#,
f
f
coxfit <- coxph(Surv(Day, Status)~Grade,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
coxfit <- coxph(Surv(Day, Status)~PrimaryDx,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
coxfit <- coxph(Surv(Day, Status)~PrimaryDx + Grade + `Most prominent pattern described`,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
data$`Most prominent pattern described`
coxfit <- coxph(Surv(Day, Status)~PrimaryDx + `Most prominent pattern described`,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
coxfit <- coxph(Surv(Day, Status)~Grade + `Most prominent pattern described`,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
data <- data %>%  mutate(Grade = as.character(Grade),
PrimaryDx = as.character(PrimaryDx),
`Most prominent pattern described` = as.character(`Most prominent pattern described`))#,
coxfit <- coxph(Surv(Day, Status)~Grade + `Most prominent pattern described`,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
coxfit <- coxph(Surv(Day, Status)~ `Most prominent pattern described`,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
data$`Metastasis (histo) Lymph node (0=not reported/not assessed, 1=reported )`
coxfit <- coxph(Surv(Day, Status)~ `Metastasis (histo) Lymph node (0=not reported/not assessed, 1=reported )`,data = data)
summary(coxfit)
ggforest(coxfit, data = data, main = "Hazard Ratio: Merriam-Focht Score 2.0",
cpositions = c(0.02, 0.15, 0.3), fontsize = 1,
refLabel = "reference", noDigits = 3)
fit <- survfit(Surv(Day, Status)~`Metastasis (histo) Lymph node (0=not reported/not assessed, 1=reported )`, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
fit <- survfit(Surv(Day, Status)~`Metastasis (histo) Lymph node (0=not reported/not assessed, 1=reported )`, data=data)
data$`Metastasis (histo) Lymph node (0=not reported/not assessed, 1=reported )`
fit <- survfit(Surv(Day, Status)~ data$`Metastasis (histo) Lymph node (0=not reported/not assessed, 1=reported )`, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
data <- data %>%  mutate(Grade = as.character(Grade),
PrimaryDx = as.character(PrimaryDx),
`Most prominent pattern described` = as.numeric(`Most prominent pattern described`))
Day = data$`SurvivalTime`
fit <- survfit(Surv(Day, Status)~all, data=data)
ggsurvplot2(fit, data=data, xlab = "Days (post-dosing)", pval = T, risk.table = T)
summary(fit)
fit
survfit
?survfit
my.formula <- y ~ x
ggplot(data = data, aes(y = data$`MitoticCount`, x = data$'SurvivalTime'), na.rm=TRUE) +
geom_smooth(method = "lm", se=FALSE, formula = my.formula) +
stat_poly_eq(formula = y ~ x, show.legend = T, parse = TRUE, na.rm=T) +
geom_point(na.rm=TRUE)+
#scale_x_continuous(name = "Days") +
#scale_y_continuous(name = "ss") +
theme_bw(base_size = 18)
###3D scatterplot
library(scatterplot3d)
my.formula <- y ~ x
ggplot(data = data, aes(y = data$`MitoticCount`, x = data$'SurvivalTime'), na.rm=TRUE) +
geom_smooth(method = "lm", se=FALSE, formula = my.formula) +
stat_poly_eq(formula = y ~ x, show.legend = T, parse = TRUE, na.rm=T) +
geom_point(na.rm=TRUE)+
#scale_x_continuous(name = "Days") +
#scale_y_continuous(name = "ss") +
theme_bw(base_size = 18)
ggplot(data = data, aes(y = data$`MitoticCount`, x = data$'SurvivalTime'), na.rm=TRUE) +
geom_smooth(method = "lm", se=FALSE, formula = my.formula)
ggplot(data = data, aes(y = data$`MitoticCount`, x = data$'SurvivalTime'), na.rm=TRUE) +
geom_smooth(method = "lm", se=FALSE, formula = my.formula) +
#tat_poly_eq(formula = y ~ x, show.legend = T, parse = TRUE, na.rm=T) +
geom_point(na.rm=TRUE)+
#scale_x_continuous(name = "Days") +
#scale_y_continuous(name = "ss") +
theme_bw(base_size = 18)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
install.packages("SPIAT")
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")}
devtools::install_github("TrigosTeam/SPIAT")
install.packages("Rtools")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
install.packages('Rtools')
library(readxl)
library(readxl)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
install.packages("SPIAT")
install.packages("SPIAT")
#data<-MHL_19_331_121_Efficacy <- read_excel("C:/Users/edmondsonef/Desktop/MHL 19-331-121 Efficacy.xlsx", sheet = "Initial CBC")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
library(SPIAT)
install.packages(c("class","KernSmooth","MASS","Matrix","nnet"))
install.packages(c("readxl","tidyverse","dplyr","ggplot2","ggsignif","Rmisc","ggpubr","gridExtra"))
library(SPIAT)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")}
devtools::install_github("TrigosTeam/SPIAT")
install.packages("devtools")
install.packages("devtools")
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")}
devtools::install_github("TrigosTeam/SPIAT")
devtools::install_github("TrigosTeam/SPIAT")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
install.packages(c("boot","cluster","foreign","MASS","Matrix","mgcv","nlme","nnet","rpart","survival"))
library(SPIAT)
getOption("download.file.method")
install.packages("RCurl")
library(RCurl)
getURLContent("https://cran.r-project.org/CRAN_mirrors.csv")
BiocManager::install("SPIAT")
options("download.file.method"="libcurl")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
library(SPIAT)
install.packages(c"class","KernSmooth","MASS","Matrix","nnet")
install.packages(c("class","KernSmooth","MASS","Matrix","nnet"))
options("download.file.method"="libcurl")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
library(SPIAT)
library(class)
library(KernSmooth)
BiocManager::install("SPIAT")
install.pakages("BiocVersion")
install.packages("BiocVersion")
options("download.file.method"="libcurl")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SPIAT")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
BiocManager::install("SPIAT")
'getOption("repos")'
library(officer)
library(magrittr)
library(flextable)
library(magick)
library(readxl)
KPC <- read_excel("C:/Users/edmondsonef/Desktop/KPC DSP GENE LIST.xlsx",
sheet = "KPC GENE LIST 07.06.22_comps_MH")
Hwang <- read_excel("C:/Users/edmondsonef/Desktop/KPC DSP GENE LIST.xlsx", sheet = "Hwang lists")
grep
library(dplyr)
LIST <- Hwang&`Neural-like progenitor`
LIST <- Hwang$`Neural-like progenitor`
LIST
LIST <- data.frame(Hwang$`Neural-like progenitor`)
LIST
SYMBOL <- Hwang$`Neural-like progenitor`
LIST <- data.frame(SYMBOL)
LIST
new <- dplyr::full_join(KPC , LIST, by = "SYMBOL")
new <- dplyr::left_join(a, b, by = "x1")
new <- dplyr::left_join(KPC , LIST, by = "SYMBOL")
rm(new)
new <- dplyr::anti_join(KPC , LIST, by = "SYMBOL",  ignore_case = TRUE)
new <- dplyr::anti_join(KPC , LIST, by = "SYMBOL")#,  ignore_case = TRUE)
new <- dplyr::semi_join(KPC, LIST, by = "SYMBOL")#,  ignore_case = TRUE)
LIST
KPC$SYMBOL
LIST$SYMBOL_L <- tolower(LIST$SYMBOL)
KPC$SYMBOL_L <- tolower(KPC$SYMBOL)
new <- dplyr::semi_join(KPC, LIST, by = "SYMBOL_L")#,  ignore_case = TRUE)
new <- dplyr::full_join(KPC, LIST, by = "SYMBOL")
dplyr::semi_join(KPC, LIST, by = "SYMBOL_L")#,  ignore_case = TRUE)
new
write.csv(new, "C:/Users/edmondsonef/Desktop/merged.csv")
new <- dplyr::left_join(KPC, LIST, by = "SYMBOL")
write.csv(new, "C:/Users/edmondsonef/Desktop/merged.csv")
KPC
new <- dplyr::right_join(KPC, LIST, by = "SYMBOL")
new
new <- dplyr::inner_join(KPC, LIST, by = "SYMBOL")
KPC <- read_excel("C:/Users/edmondsonef/Desktop/KPC DSP GENE LIST.xlsx", sheet = "KPC GENE LIST 07.06.22_comps_MH")
Hwang <- read_excel("C:/Users/edmondsonef/Desktop/KPC DSP GENE LIST.xlsx", sheet = "Hwang lists")
SYMBOL <- Hwang$`Neural-like progenitor`
LIST <- data.frame(SYMBOL)
LIST$SYMBOL_L <- tolower(LIST$SYMBOL)
KPC$SYMBOL_L <- tolower(KPC$SYMBOL)
dplyr::inner_join(KPC, LIST, by = "SYMBOL_L")
new <- dplyr::left_join(KPC, LIST, by = "SYMBOL_L")
dplyr::semi_join(KPC, LIST, by = "SYMBOL_L")#,  ignore_case = TRUE)
write.csv(new, "C:/Users/edmondsonef/Desktop/merged.csv")
#SYMBOL <- Hwang$`Neural-like progenitor`
SYMBOL <- Hwang$`Acinar-like`
LIST <- data.frame(SYMBOL)
LIST$SYMBOL_L <- tolower(LIST$SYMBOL)
rm(new)
new <- dplyr::left_join(KPC, LIST, by = "SYMBOL_L")
write.csv(new, "C:/Users/edmondsonef/Desktop/acinar_like.csv")
#SYMBOL <- Hwang$`Neural-like progenitor`
#SYMBOL <- Hwang$`Acinar-like`
SYMBOL <- Hwang$`Classical-like`
LIST <- data.frame(SYMBOL)
LIST$SYMBOL_L <- tolower(LIST$SYMBOL)
rm(new)
new <- dplyr::left_join(KPC, LIST, by = "SYMBOL_L")
write.csv(new, "C:/Users/edmondsonef/Desktop/classical_like.csv")
#SYMBOL <- Hwang$`Neural-like progenitor`
#SYMBOL <- Hwang$`Acinar-like`
#SYMBOL <- Hwang$`Classical-like`
SYMBOL <- Hwang$Basaloid
LIST <- data.frame(SYMBOL)
LIST$SYMBOL_L <- tolower(LIST$SYMBOL)
rm(new)
new <- dplyr::left_join(KPC, LIST, by = "SYMBOL_L")
write.csv(new, "C:/Users/edmondsonef/Desktop/basaloid.csv")
#SYMBOL <- Hwang$`Neural-like progenitor`
#SYMBOL <- Hwang$`Acinar-like`
#SYMBOL <- Hwang$`Classical-like`
#SYMBOL <- Hwang$Basaloid
SYMBOL <- Hwang$Squamoid
LIST <- data.frame(SYMBOL)
LIST$SYMBOL_L <- tolower(LIST$SYMBOL)
rm(new)
new <- dplyr::left_join(KPC, LIST, by = "SYMBOL_L")
write.csv(new, "C:/Users/edmondsonef/Desktop/Squamoid.csv")
#SYMBOL <- Hwang$`Neural-like progenitor`
#SYMBOL <- Hwang$`Acinar-like`
#SYMBOL <- Hwang$`Classical-like`
#SYMBOL <- Hwang$Basaloid
#SYMBOL <- Hwang$Squamoid
SYMBOL <- Hwang$Mesenchymal
LIST <- data.frame(SYMBOL)
LIST$SYMBOL_L <- tolower(LIST$SYMBOL)
rm(new)
new <- dplyr::left_join(KPC, LIST, by = "SYMBOL_L")
write.csv(new, "C:/Users/edmondsonef/Desktop/Mesenchymal.csv")
#SYMBOL <- Hwang$`Neural-like progenitor`
#SYMBOL <- Hwang$`Acinar-like`
#SYMBOL <- Hwang$`Classical-like`
#SYMBOL <- Hwang$Basaloid
#SYMBOL <- Hwang$Squamoid
#SYMBOL <- Hwang$Mesenchymal
SYMBOL <- Hwang$`Neuroendocrine-like`
LIST <- data.frame(SYMBOL)
LIST$SYMBOL_L <- tolower(LIST$SYMBOL)
rm(new)
new <- dplyr::left_join(KPC, LIST, by = "SYMBOL_L")
write.csv(new, "C:/Users/edmondsonef/Desktop/Neuroendocrine-like.csv")
KPC <- read_excel("C:/Users/edmondsonef/Desktop/KPC DSP GENE LIST.xlsx", sheet = "KPC GENE LIST 07.06.22_comps_MH")
#Remove Duplicates
new <- distinct(KPC, SYMBOL, .keep_all= TRUE)
write.csv(new, "C:/Users/edmondsonef/Desktop/data.csv")
### GO sets
KPC <- read_excel("C:/Users/edmondsonef/Desktop/KPC DSP GENE LIST.xlsx", sheet = "KPC GENE LIST 07.06.22_comps_MH")
library(readxl)
axon <- read_excel("C:/Users/edmondsonef/Desktop/GO_term_summary_20230601_102507.xlsx")
axon$SYMBOL <- axon$Symbol
new <- dplyr::left_join(KPC, LIST, by = "SYMBOL_L")
new <- dplyr::left_join(KPC, axon, by = "SYMBOL_L")
new <- dplyr::left_join(KPC, axon, by = "SYMBOL")
new
new
axon
new <- dplyr::right_join(KPC, axon, by = "SYMBOL")
new
axon$Symbol
axon <- distinct(axon, SYMBOL, .keep_all= TRUE)
new <- dplyr::right_join(KPC, axon, by = "SYMBOL")
new <- dplyr::left_join(KPC, axon, by = "SYMBOL")
write.csv(new, "C:/Users/edmondsonef/Desktop/data.csv")
library(readxl)
KPC <- read_excel("C:/Users/edmondsonef/Desktop/KPC DSP GENE LIST.xlsx",
sheet = "Sheet10")
library(readxl)
axon <- read_excel("C:/Users/edmondsonef/Desktop/GO_term_summary_20230601_120836.xlsx")
axon$SYMBOL <- axon$Symbol
axon <- distinct(axon, SYMBOL, .keep_all= TRUE)
axon
library(readxl)
axon <- read_excel("C:/Users/edmondsonef/Desktop/GO_term_summary_20230601_120836.xlsx")
#axon$SYMBOL <- axon$Symbol
axon <- distinct(axon, SYMBOL, .keep_all= TRUE)
new <- dplyr::left_join(KPC, axon, by = "SYMBOL")
write.csv(new, "C:/Users/edmondsonef/Desktop/data.csv")
library(officer)
library(magrittr)
library(flextable)
library(magick)
study = "MHL 230588"
investigator = " Stracker"
path = "F:/QuPath/MHL 230588 Stracker/export/"
#path = "C:/Users/edmondsonef/Desktop/export/"
img.file <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)#, table.layout = "fixed")
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"), use_loc_size = T)
#doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
sizes <- lapply(img.file[i], function(x) {
z <- magick::image_read(x)
z <- magick::image_data(z)
attr(z, "dim")[-1]
})
sizes <- do.call(rbind, sizes)
width <- sizes[, 1]/150
height <- sizes[, 2]/150
doc <- ph_with(x = doc, external_img(img.file[i], width = width, height = height, unit = "cm"),
location = ph_location_left(), use_loc_size = FALSE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
