doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = ".jpg", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(study), location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
paste("slide",i)
paste(img.file.name[i])
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = ".jpg", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
library(officer)
library(magrittr)
library(flextable)
study = "MHL 230234"
investigator = " Stracker"
path = "F:/QuPath/MHL 230234 Stracker/export/"
img.file <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(study), location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
study = "MHL 230234"
investigator = " Stracker"
path = "F:/QuPath/MHL 230234 Stracker/export/"
img.file <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"))
#doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
library(officer)
library(magrittr)
library(flextable)
study = "MHL 231335"
investigator = " Ho"
path = "F:/QuPath/MHL 231335 Ho/export/"
img.file <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"))
#doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
library(qtl2)
library(devtools)
library(yaml)
library(jsonlite)
library(data.table)
library(RcppEigen)
library(RSQLite)
library(qtl)
library(qtl2convert)
library(qtl2)
library(devtools)
library(yaml)
library(jsonlite)
library(data.table)
library(RcppEigen)
library(RSQLite)
library(qtl)
library(qtl2convert)
#load(url("ftp://ftp.jax.org/MUGA/MM_snps.Rdata"))
load("C:/Users/edmondsonef/Desktop/QTL/Rqtl2 Files/HZE-001_qtl2.RData")
View(pheno)
data <- read_excel("C:/Users/edmondsonef/Desktop/Cataract/CATARACT_final.xlsx", sheet ="CATARACT_fin")
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/Cataract/CATARACT_final.xlsx", sheet ="CATARACT_fin")
Total <- data
pheno = data.frame(row.names = Total$row.names, #sex = as.numeric(Total$sex == "F"),
albino = as.numeric(Total$`coat color`=="albino"))
pheno = data.frame(row.names = Total$row.names, sex = as.numeric(Total$sex == "F"),
albino = as.numeric(Total$`coat color`=="albino"),
cat = as.numeric(Total$cat_score))
addcovar = matrix(pheno$sex, ncol = 1, dimnames = list(rownames(pheno), "sex"))
pheno$albino
out_albino <- scan1(genoprobs = probs, pheno = pheno$albino, kinship = K, addcovar = addcovar, cores=3)
pheno = data.frame(row.names = Total$row.names, #sex = as.numeric(Total$sex == "F"),
albino = as.numeric(Total$`coat color`=="albino"))#,
out_albino <- scan1(genoprobs = probs, pheno = pheno, kinship = K, addcovar = addcovar, cores=3)
out_albino <- scan1(genoprobs = probs, pheno = pheno, kinship = K, addcovar = addcovar, cores=3)
#load("C:/Users/edmondsonef/Desktop/QTL/CAT_QTLproject_2022.Rdata")
load("C:/Users/edmondsonef/Desktop/QTL/HS_qtl2_probs_K.RData")
#load("C:/Users/edmondsonef/Desktop/QTL/CAT_QTLproject_2022.Rdata")
load("C:/Users/edmondsonef/Desktop/QTL/HZEproject.RData")
pheno <- read_excel("C:/Users/edmondsonef/Desktop/Cataract/CATARACT_final.xlsx", sheet ="CATARACT_fin")
Total <- pheno
pheno = data.frame(row.names = Total$row.names, sex = as.numeric(Total$sex == "F"),
albino = as.numeric(Total$`coat color`=="albino"),
cat = as.numeric(Total$cat_score),
days = as.numeric(Total$days))
addcovar = matrix(pheno$sex, ncol = 1, dimnames = list(rownames(pheno), "sex"))
library(qtl2convert)
library(qtl2)
base_dir  = 'C:/Users/edmondsonef/Desktop/QTL/Rqtl2 Files/'
#src_file  = file.path(base_dir, 'HZE-001.Rdata')
dest_file = file.path(base_dir, 'HZE-EFE_qtl2.Rdata')
new_probs = qtl2convert::probs_doqtl_to_qtl2(probs = probs, map = markers,
chr_column = 'Chr', pos_column = 'cM',
marker_column = 'SNP_ID')
K = calc_kinship(probs = new_probs, type = 'loco')
save(pheno, new_probs, K, markers, file = dest_file)
load("C:/Users/edmondsonef/Desktop/QTL/Rqtl2 Files/HZE-EFE_qtl2.RData")
out_albino <- scan1(genoprobs = new_probs, pheno = pheno, kinship = K, addcovar = addcovar, cores=3)
addcovar = matrix(pheno$sex, ncol = 1, dimnames = list(rownames(pheno), "sex"))
out_albino <- scan1(genoprobs = new_probs, pheno = pheno, kinship = K, addcovar = addcovar, cores=3)
pheno_alb = data.frame(row.names = Total$row.names, albino = as.numeric(Total$`coat color`=="albino"))
pheno_alb = data.frame(row.names = pheno$row.names, albino = as.numeric(pheno$`coat color`=="albino"))
pheno_alb = data.frame(row.names = pheno$row.names, albino = as.numeric(pheno$`ablino`=="1"))
pheno_alb = data.frame(row.names = pheno$row.names, albino = as.numeric(pheno$`ablino`))
pheno$`ablino`
pheno_alb = data.frame(row.names = pheno$row.names, albino = as.numeric(pheno$`albino`))
out_albino <- scan1(genoprobs = new_probs, pheno = pheno, kinship = K, addcovar = addcovar, cores=3)
out_albino <- scan1(genoprobs = new_probs, pheno = pheno_alb, kinship = K, addcovar = addcovar, cores=3)
pheno$row.names
head(pheno)
out_albino <- scan1(genoprobs = new_probs, pheno = pheno$albino, kinship = K, addcovar = addcovar, cores=3)
pheno$albino
out_albino <- scan1(genoprobs = new_probs,
pheno = pheno,
kinship = K,
addcovar = addcovar, cores=3)
par(mar=c(5.1, 4.1, 1.1, 1.1))
ymx <- maxlod(out_albino) # overall maximum LOD score
plot(out_albino, map = markers, lodcolumn=1, col="slateblue", ylim=c(0, ymx*1.02))
legend("topleft", lwd=2, col=c("slateblue", "violetred"), colnames(out_albino), bg="gray90")
plot(out_albino)#, map = markers, lodcolumn=1, col="slateblue", ylim=c(0, ymx*1.02))
ymx <- maxlod(out_albino) # overall maximum LOD score
plot(out_albino)#, map = markers, lodcolumn=1, col="slateblue", ylim=c(0, ymx*1.02))
plot(out_albino, map = markers)#, lodcolumn=1, col="slateblue", ylim=c(0, ymx*1.02))
plot(out_albino, map = markers, lodcolumn=1)#, col="slateblue", ylim=c(0, ymx*1.02))
plot_scan1(out_albino)
plot_scan1(out_albino,map = markers)
find_peaks(out_albino, map, threshold=4, drop=1.5)
find_peaks(out_albino, map, threshold=40, drop=1.5)
find_peaks(out_albino, map= markers, threshold=40, drop=1.5)
find_peaks(out_albino, map= markers$SNP_ID, threshold=40, drop=1.5)
map <- insert_pseudomarkers(pheno, step=1)
plot(out_albino, map, lodcolumn=1, col="slateblue", ylim=c(0, ymx*1.02))
map <- insert_pseudomarkers(markers, step=1)
map <- insert_pseudomarkers(markers$SNP_ID, step=1)
maxlod(out_albino)
map <- dplyr::select(markers, Chr, cM)
find_peaks(out_albino, map= map, threshold=40, drop=1.5)
map <- dplyr::select(markers,SNP_ID,Chr, cM)
find_peaks(out_albino, map= map, threshold=40, drop=1.5)
map <- map %>% rename("SNP_ID" = "markers")
library(dplyr)
map <- map %>% rename("SNP_ID" = "markers")
names(map)[1]
names(map)[1] = "marker"
find_peaks(out_albino, map= map, threshold=40, drop=1.5)
find_peaks(out_albino, map= map, threshold=20, drop=1.5)
out_albino
head(out_albino)
head(map)
names(map)[2] = "chr"
names(map)[3] = "pos"
find_peaks(out_albino, map= map, threshold=20, drop=1.5)
ymx <- maxlod(out_albino[2]) # overall maximum LOD score
ymx <- maxlod(out_albino[3]) # overall maximum LOD score
ymx <- maxlod(out_albino[4]) # overall maximum LOD score
ymx <- maxlod(out_albino[5]) # overall maximum LOD score
ymx <- maxlod(out_albino[66]) # overall maximum LOD score
ymx <- maxlod(out_albino[,2]) # overall maximum LOD score
out_albino[,2]
head(out_albino[,2])
ymx <- maxlod(out_albino[,3]) # overall maximum LOD score
head(out_albino)
ymx <- maxlod(out_albino[,4]) # overall maximum LOD score
ymx <- maxlod(out_albino[,5]) # overall maximum LOD score
ymx <- maxlod(out_albino[,1]) # overall maximum LOD score
ymx <- maxlod(out_albino[,2]) # overall maximum LOD score
ymx <- maxlod(out_albino[,3]) # overall maximum LOD score
ymx <- maxlod(out_albino[,4]) # overall maximum LOD score
ymx <- maxlod(out_albino[,3]) # overall maximum LOD score
find_peaks(out_albino[,3], map= map, threshold=20, drop=1.5)
find_peaks(out_albino[,3], map= map, threshold=7, drop=1.5)
head(out_albino)
head(map)
rownames(map) <- map$marker
head(map)
find_peaks(out_albino[,3], map= map, threshold=7, drop=1.5)
head(out_albino)
head(map)
map <- dplyr::select(markers,SNP_ID,Chr, cM)
rownames(map) <- map$marker
map <- dplyr::select(markers,Chr, cM)
rownames(map) <- markers$SNP_ID
head(map)
find_peaks(out_albino[,3], map= map, threshold=7, drop=1.5)
names(map)[1] = "chr"
names(map)[2] = "pos"
head(out_albino)
head(map)
find_peaks(out_albino[,3], map= map, threshold=7, drop=1.5)
find_peaks(out_albino, map= map, threshold=7, drop=1.5)
head(out_albino)
head(map)
find_peaks(out_albino, map= map, threshold=7, drop=1.5)
maxlod(out_albino[,3])
maxlod(out_albino[,2])
load("C:/Users/edmondsonef/Desktop/QTL/Rqtl2 Files/HZE-EFE_qtl2.RData")
addcovar = matrix(pheno$sex, ncol = 1, dimnames = list(rownames(pheno), "sex"))
pheno$row.names
head(pheno)
pheno$`albino`
pheno_a = data.frame(row.names = pheno$row.names, albino = as.numeric(pheno$`albino`))
head(pheno_a)
pheno$row.names
head(pheno)
row.names(pheno)
pheno_a = data.frame(row.names = row.names(pheno), albino = as.numeric(pheno$`albino`))
head(pheno_a)
map = qtl2convert::map_df_to_list(markers, chr_column = "chr", pos_column = "pos", marker_column = "marker")
library(qtl2)
head(markers)
markers$bp
markers$pos = markers$Mb_NCBI38
map = qtl2convert::map_df_to_list(markers, chr_column = "Chr", pos_column = "pos", marker_column = "SNP_ID")
library(qtl2convert)
install.packages(c("qtl2", "devtools", "yaml", "jasonlite", "qtl", "qtl2convert", "readxl", "dplyr"))
library(qtl2)
install.packages("BiocManager")
library(qtl2)
library(qtl2)
library(devtools)
library(yaml)
library(jsonlite)
library(data.table)
install.packages("BiocManager")''
install.packages("BiocManager")
BiocManager::install(c("GenomicRanges", "Organism.dplyr"))
install.packages("BiocManager")
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/MHL 230260 Ridnour Wink.xlsx",
sheet = "Sheet1")
library(gridExtra)
library(readxl)
library(ggpubr)
library(Rmisc)
library(tidyverse)
library(plyr)
library(GGally)
library(ggplot2)
library(tidyverse)
library(gapminder)
library(dplyr)
data %>% group_by(`Image Tag`) %>% summarise(data, sum = sum(`Area (microns squared)`))
new <- data %>% group_by(`Image Tag`) %>% summarise(data, sum = sum(`Area (microns squared)`))
View(new)
new <- data %>% group_by(`Image Tag`) %>% summarise(sum = sum(`Area (microns squared)`))
View(new)
new <- data %>% group_by(`Image Tag`, Layer Name`) %>% summarise(sum = sum(`Area (microns squared)`))
new <- data %>% group_by(`Image Tag`, `Layer Name`) %>% summarise(sum = sum(`Area (microns squared)`))
View(new)
write.csv(new, "C:/Users/edmondsonef/Desktop/new.csv")
library(gridExtra)
library(readxl)
library(ggpubr)
library(Rmisc)
library(tidyverse)
library(plyr)
library(GGally)
library(ggplot2)
library(tidyverse)
library(gapminder)
library(dplyr)
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/Humanized/MHL Humanized Tissue Counts.xlsx",
sheet = "19-331-122 Results")
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/Humanized/MHL Humanized Tissue Counts.xlsx",
sheet = "19-331-122 Results")
data$`Tumor PDL1 Positive %`
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/Humanized/MHL Humanized Tissue Counts.xlsx",
sheet = "Sheet1")
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/Humanized/MHL Humanized Tissue Counts.xlsx",
sheet = "Sheet1")
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/Humanized/MHL Humanized Tissue Counts.xlsx",
sheet = "Sheet1")
data$Strain
### PDL1
my_mean = aggregate(data$PDL1, by=list(data$Strain), mean, na.rm = T) ; colnames(my_mean)=c("Group" , "mean")
my_CI = aggregate(data$WBC , by=list(data$Strain) , FUN = function(x) t.test(x)$conf.int) ; colnames(my_CI)=c("Group" , "CI")
my_info = merge(my_mean , my_CI , by.x=1 , by.y=1)
my_info$CIdiff = ((my_CI$CI[,2] - my_CI$CI[,1])/2)
my_CI = aggregate(data$PDL1 , by=list(data$Strain) , FUN = function(x) t.test(x)$conf.int) ; colnames(my_CI)=c("Group" , "CI")
my_info = merge(my_mean , my_CI , by.x=1 , by.y=1)
my_info$CIdiff = ((my_CI$CI[,2] - my_CI$CI[,1])/2)
my_info$ref.low = c(2.71)
my_info$ref.hi = c(12.33)
### WBC Plot
PDL1 <- ggplot(data) +
scale_y_continuous(name = "PDL1") +
geom_errorbar(data = my_info, aes(x = Group, ymin = ref.low, ymax = ref.hi), color = "#f5f5f5", width = 0, size=10) +
geom_jitter(aes(x = Group, y = WBC, color = `Groups`), width = 0.1, show.legend=T)+
geom_point(data = my_info, aes(x = Group , y = mean), color = "#a9a9a9", size = 1.5) +
geom_errorbar(data = my_info, aes(x = Group, y = CIdiff, ymin = mean - CIdiff, ymax = mean + CIdiff), color = "#a9a9a9", width = 0.2 , size=0.7)  +
theme_bw() +
theme(axis.text.x=element_text(angle=25,hjust=1)) +
theme(axis.title.x=element_blank())
library(gridExtra)
library(readxl)
library(ggpubr)
library(Rmisc)
library(tidyverse)
library(plyr)
library(GGally)
library(ggplot2)
library(tidyverse)
library(gapminder)
library(dplyr)
library(gridExtra)
library(readxl)
library(ggpubr)
library(Rmisc)
library(tidyverse)
library(plyr)
library(GGally)
library(ggplot2)
library(tidyverse)
library(gapminder)
library(dplyr)
library(gridExtra)
library(readxl)
library(ggpubr)
library(Rmisc)
library(tidyverse)
library(plyr)
library(GGally)
library(ggplot2)
library(tidyverse)
library(gapminder)
library(dplyr)
library(gridExtra)
library(gridExtra)
library(gridExtra)
library(readxl)
library(ggpubr)
library(Rmisc)
library(tidyverse)
library(plyr)
library(GGally)
install.packages("gridExtra")
library(gridExtra)
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/MHL 231473 Zhang Lung.xlsx")
variable = data$`% Tumor`
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/MHL 231473 Zhang Lung.xlsx")
variable = data$`% Tumor`
group = data$`Groups`
ggplot(data, aes(group, variable))+
geom_boxplot()+
scale_y_continuous(name = "Survival Adjusted Leukemic Grade \n(BM Grade / Time on Test)") +
geom_jitter(aes(x = group, y = variable, color = data$'Group'), width = 0.2, height = 0.01, size = 4)
library(survMisc)
library(survival)
library(jskm)
library(survey)
library(survminer)
library(survival)
library(ggplot2)
library(ggfortify)
library(readxl)
library(survival)
library(survminer)
library(flexsurv)
library(dplyr)
library(survtools)
library(gridExtra)
library(readxl)
library(ggpubr)
library(Rmisc)
library(tidyverse)
library(plyr)
library(GGally)
library(ggplot2)
library(tidyverse)
library(gapminder)
library(dplyr)
library(ggsignif)
library(ggplot2)
library(gridExtra)
library(readxl)
library(patchwork)
ggplot(data, aes(group, variable))+
geom_boxplot()+
scale_y_continuous(name = "Survival Adjusted Leukemic Grade \n(BM Grade / Time on Test)") +
geom_jitter(aes(x = group, y = variable, color = data$'Group'), width = 0.2, height = 0.01, size = 4)
ggplot(data, aes(group, variable))+
geom_boxplot()+
scale_y_continuous(name = "Survival Adjusted Leukemic Grade \n(BM Grade / Time on Test)") +
geom_jitter(aes(x = group, y = variable, color = data$'Groups'), width = 0.2, height = 0.01, size = 4)
ggplot(data, aes(group, variable))+
geom_boxplot()+
scale_y_continuous(name = "-") +
geom_jitter(aes(x = group, y = variable, color = group), width = 0.2, height = 0.01, size = 4)
group = as.string(data$`Groups`)
group = as.character(data$`Groups`)
ggplot(data, aes(group, variable))+
geom_boxplot()+
scale_y_continuous(name = "-") +
geom_jitter(aes(x = group, y = variable, color = group), width = 0.2, height = 0.01, size = 4)
ggplot(data, aes(group, variable))+
geom_boxplot()+
scale_y_continuous(name = "-") +
geom_jitter(aes(x = group, y = variable, color = group), width = 0.2, height = 0.01, size = 4)+
geom_signif(
comparisons = group)
ggplot(data, aes(group, variable))+
geom_boxplot()+
scale_y_continuous(name = "-") +
geom_jitter(aes(x = group, y = variable, color = group), width = 0.2, height = 0.01, size = 4)+
theme_bw(base_size = 18) +
theme(axis.title.x=element_blank(), text = element_text(size = 18), legend.title=element_blank())
ggplot(data, aes(group, variable))+
geom_boxplot()+
scale_y_continuous(name = "Percentage of Lung Classified as Tumor") +
geom_jitter(aes(x = group, y = variable, color = group), width = 0.2, height = 0.01, size = 4)+
theme_bw(base_size = 18) +
theme(axis.title.x=element_blank(), text = element_text(size = 18), legend.title=element_blank())
