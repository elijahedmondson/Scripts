567
567
56
5
fdh
fhn
6
556
hq90
q()
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
gc()
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
install.packages("FactoMineR")
install.packages("Giotto")
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
if (!require("devtools")) install.packages("devtools")
library(devtools)
install_github("husson/FactoMineR")
library(FactoMineR)
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
install.packages("rlang")
install.packages("rlang")
if (!require("devtools")) install.packages("devtools")
library(devtools)
install_github("husson/FactoMineR")
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
if (!require("devtools")) install.packages("devtools")
library(devtools)
install_github("husson/FactoMineR")
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
install.packages("rlang")
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(devtools)
library(devtools)
install_github("husson/FactoMineR")
library(FactoMineR)
install_github("drieslab/Giotto@master")
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
instrs = createGiottoInstructions(show_plot = FALSE,
save_plot = TRUE,
save_dir = 'giotto_results',
python_path = "C:/Users/edmondsonef/AppData/Local/Programs/Python/Python39/")
qp = read.delim("C:/Users/edmondsonef/desktop/measurements.tsv")
qp = read.delim("C:/Users/edmondsonef/desktop/measurements.tsv")
head(qp)
qp_expr = qp[,grepl("(Cell|Nucleus|Cytoplasm|Membrane)..",names(qp)) & !grepl("Autofluorescence|DAPI|Area|Circularity|Perimeter|caliper|Eccentricity",names(qp))]
qp_expr = t(qp_expr)
colnames(qp_expr) = rownames(qp)
qp_spatial_loc = qp[,c("Centroid.X.Âµm","Centroid.Y.Âµm")]
qp_spatial_loc$Centroid.Y.Âµm = - qp_spatial_loc$Centroid.Y.Âµm
qp_spatial_loc$cell_ID = rownames(qp)
qp_spatial_loc = qp_spatial_loc[,c(3,1,2)]
gobj <- createGiottoObject(raw_exprs = qp_expr,
spatial_locs = qp_spatial_loc,
instructions = instrs)
instrs = createGiottoInstructions(show_plot = FALSE,
save_plot = TRUE,
save_dir = 'giotto_results',
python_path = "C:/Users/edmondsonef/AppData/Local/Programs/Python/Python39/")
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
instrs = createGiottoInstructions(show_plot = FALSE,
save_plot = TRUE,
save_dir = 'giotto_results',
python_path = "C:/Users/edmondsonef/AppData/Local/Programs/Python/Python39/")
qp = read.delim("C:/Users/edmondsonef/desktop/measurements.tsv")
head(qp)
qp_expr = qp[,grepl("(Cell|Nucleus|Cytoplasm|Membrane)..",names(qp)) & !grepl("Autofluorescence|DAPI|",names(qp))]
#Area|Circularity|Perimeter|caliper|Eccentricity",names(qp))]
qp_expr = t(qp_expr)
colnames(qp_expr) = rownames(qp)
qp_spatial_loc = qp[,c("Centroid.X.Âµm","Centroid.Y.Âµm")]
qp_spatial_loc$Centroid.Y.Âµm = - qp_spatial_loc$Centroid.Y.Âµm
qp_spatial_loc$cell_ID = rownames(qp)
qp_spatial_loc = qp_spatial_loc[,c(3,1,2)]
gobj <- createGiottoObject(raw_exprs = qp_expr,
spatial_locs = qp_spatial_loc,
instructions = instrs)
?createGiottoInstructions
instrs = createGiottoInstructions(show_plot = FALSE,
save_plot = TRUE,
save_dir = 'C:/Users/edmondsonef/desktop/Giotto_Results/',
python_path = "C:/Users/edmondsonef/AppData/Local/Programs/Python/Python39/")
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
instrs = createGiottoInstructions(show_plot = FALSE,
save_plot = TRUE,
save_dir = 'C:/Users/edmondsonef/desktop/Giotto_Results/',
python_path = "C:/Users/edmondsonef/AppData/Local/Programs/Python/Python39/")
instrs = createGiottoInstructions(show_plot = FALSE,
save_plot = TRUE,
save_dir = 'C:/Users/edmondsonef/desktop/Giotto_Results/',
#python_path = "C:/Users/edmondsonef/AppData/Local/Programs/Python/Python39/")
python_path = "C:/Users/edmondsonef/Anaconda3/Lib/site-packages")
instrs = createGiottoInstructions(show_plot = FALSE,
save_plot = TRUE,
save_dir = 'C:/Users/edmondsonef/desktop/Giotto_Results/',
#python_path = "C:/Users/edmondsonef/AppData/Local/Programs/Python/Python39/")
python_path = "C:/Users/edmondsonef/Anaconda3/")
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
instrs = createGiottoInstructions(show_plot = FALSE,
save_plot = TRUE,
save_dir = 'C:/Users/edmondsonef/desktop/Giotto_Results/',
python_path = "C:/Users/edmondsonef/AppData/Local/Programs/Python/Python39/")
#python_path = "C:/Users/edmondsonef/Anaconda3/")
qp = read.delim("C:/Users/edmondsonef/desktop/measurements.tsv")
head(qp)
qp_expr = qp[,grepl("(Cell|Nucleus|Cytoplasm|Membrane)..",names(qp)) & !grepl("Autofluorescence|DAPI|",names(qp))]
#Area|Circularity|Perimeter|caliper|Eccentricity",names(qp))]
qp_expr = t(qp_expr)
colnames(qp_expr) = rownames(qp)
qp_spatial_loc = qp[,c("Centroid.X.Âµm","Centroid.Y.Âµm")]
qp_spatial_loc$Centroid.Y.Âµm = - qp_spatial_loc$Centroid.Y.Âµm
qp_spatial_loc$cell_ID = rownames(qp)
qp_spatial_loc = qp_spatial_loc[,c(3,1,2)]
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
library(scran)
library(smfishHmrf)
library(trendsceek)
#library(SPARK)
library(multinet)
library(RTriangle)
library(FactoMineR)
library(Giotto)
instrs = createGiottoInstructions(show_plot = FALSE,
save_plot = TRUE,
save_dir = 'C:/Users/edmondsonef/desktop/Giotto_Results/',
python_path = "C:/Users/edmondsonef/AppData/Local/Programs/Python/Python39/")
#python_path = "C:/Users/edmondsonef/Anaconda3/")
qp = read.delim("C:/Users/edmondsonef/desktop/measurements.tsv")
head(qp)
qp_expr = qp[,grepl("(Cell|Nucleus|Cytoplasm|Membrane)..",names(qp)) & !grepl("Autofluorescence|DAPI|",names(qp))]
#Area|Circularity|Perimeter|caliper|Eccentricity",names(qp))]
qp_expr = t(qp_expr)
colnames(qp_expr) = rownames(qp)
qp_spatial_loc = qp[,c("Centroid.X.Âµm","Centroid.Y.Âµm")]
qp_spatial_loc$Centroid.Y.Âµm = - qp_spatial_loc$Centroid.Y.Âµm
qp_spatial_loc$cell_ID = rownames(qp)
qp_spatial_loc = qp_spatial_loc[,c(3,1,2)]
gobj <- createGiottoObject(raw_exprs = qp_expr,
spatial_locs = qp_spatial_loc,
instructions = instrs)
# optionally add QuPath metadata such as marker positivity
qp_metadata = qp[,grepl("Class|phenotype",names(qp))]
qp_metadata$cell_ID = rownames(qp)
gobj<-addCellMetadata(gobj, new_metadata = qp_metadata,
by_column = T,
column_cell_ID = "cell_ID")
library(officer)
library(magrittr)
library(flextable)
library(magick)
library(officer)
library(magrittr)
library(flextable)
library(magick)
library(officer)
library(magrittr)
library(flextable)
library(magick)
study = "Skimune" #"MHL 231464"
investigator = " MD"
#path = "F:/QuPath/MHL 231464 Stracker/export/"
path = "C:/Users/edmondsonef/Desktop/Skimune/"
img.file <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)#, table.layout = "fixed")
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"), use_loc_size = T)
#doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
sizes <- lapply(img.file[i], function(x) {
z <- magick::image_read(x)
z <- magick::image_data(z)
attr(z, "dim")[-1]
})
sizes <- do.call(rbind, sizes)
width <- sizes[, 1]/150
height <- sizes[, 2]/150
doc <- ph_with(x = doc, external_img(img.file[i], width = width, height = height, unit = "cm"),
location = ph_location_left(), use_loc_size = FALSE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
library(officer)
library(magrittr)
library(flextable)
library(magick)
study = "Skimune" #"MHL 231464"
investigator = " MD"
#path = "F:/QuPath/MHL 231464 Stracker/export/"
path = "C:/Users/edmondsonef/Desktop/Skimune/"
img.file <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)#, table.layout = "fixed")
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"), use_loc_size = T)
#doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
sizes <- lapply(img.file[i], function(x) {
z <- magick::image_read(x)
z <- magick::image_data(z)
attr(z, "dim")[-1]
})
sizes <- do.call(rbind, sizes)
width <- sizes[, 1]/150
height <- sizes[, 2]/150
doc <- ph_with(x = doc, external_img(img.file[i], width = width, height = height, unit = "cm"),
location = ph_location_left(), use_loc_size = FALSE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
study = "Skimune" #"MHL 231464"
investigator = " MD"
#path = "F:/QuPath/MHL 231464 Stracker/export/"
path = "C:/Users/edmondsonef/Desktop/Skimune/"
img.file <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)#, table.layout = "fixed")
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"), use_loc_size = T)
#doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
sizes <- lapply(img.file[i], function(x) {
z <- magick::image_read(x)
z <- magick::image_data(z)
attr(z, "dim")[-1]
})
sizes <- do.call(rbind, sizes)
width <- sizes[, 1]/150
height <- sizes[, 2]/150
doc <- ph_with(x = doc, external_img(img.file[i], width = width, height = height, unit = "cm"),
location = ph_location_left(), use_loc_size = FALSE)
}
library(officer)
library(magrittr)
library(flextable)
library(magick)
study = "Skimune" #"MHL 231464"
investigator = " MD"
#path = "F:/QuPath/MHL 231464 Stracker/export/"
path = "C:/Users/edmondsonef/Desktop/Skimune/"
img.file <- list.files(path, pattern = ".tif", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".tif", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)#, table.layout = "fixed")
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"), use_loc_size = T)
#doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
sizes <- lapply(img.file[i], function(x) {
z <- magick::image_read(x)
z <- magick::image_data(z)
attr(z, "dim")[-1]
})
sizes <- do.call(rbind, sizes)
width <- sizes[, 1]/150
height <- sizes[, 2]/150
doc <- ph_with(x = doc, external_img(img.file[i], width = width, height = height, unit = "cm"),
location = ph_location_left(), use_loc_size = FALSE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
Manifest <- list.files(path = path)#, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
View(Manifest)
