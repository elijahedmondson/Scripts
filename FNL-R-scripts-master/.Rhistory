r_test$FDR <- p.adjust(r_test$`Pr(>|t|)`, method = "fdr")
r_test <- r_test[, c("Gene", "Subset", "Contrast", "Estimate",
"Pr(>|t|)", "FDR")]
results <- rbind(results, r_test)
}
results$Color <- "NS or FC < 0.5"
results$Color[results$`Pr(>|t|)` < 0.05] <- "P < 0.05"
results$Color[results$FDR < 0.05] <- "FDR < 0.05"
results$Color[results$FDR < 0.001] <- "FDR < 0.001"
results$Color[abs(results$Estimate) < 0.5] <- "NS or FC < 0.5"
results$Color <- factor(results$Color, levels = c("NS or FC < 0.5", "P < 0.05", "FDR < 0.05", "FDR < 0.001"))
dplyr::count(results, FDR < 0.05)
dplyr::count(results, `Pr(>|t|)` < 0.05)
# top <- dplyr::filter(results, `Pr(>|t|)` < 0.05)
# # top <- dplyr::filter(results, results$FDR < 0.05)
# write.csv(top, "F:/GeoMX KPC/WTA_11232022/processed_data/STRAIN_p05_KPC_PDAC.csv")
head(results)
results$invert_P <- (-log10(results$`Pr(>|t|)`)) * sign(results$Estimate)
top_g <- c()
for(cond in c("Full ROI")) {
ind <- results$Subset == cond
top_g <- c(top_g,
results[ind, 'Gene'][order(results[ind, 'invert_P'], decreasing = TRUE)[1:50]],
results[ind, 'Gene'][order(results[ind, 'invert_P'], decreasing = FALSE)[1:50]])
}
top_g <- unique(top_g)
top_g
#reverse log fold change to fit with label
results$Estimate1 <- results$Estimate*(-1)
# Graph results
volc_plot <- ggplot(results,                                                             ##
aes(x = Estimate1, y = -log10(`Pr(>|t|)`),
color = Color, label = Gene)) +
geom_vline(xintercept = c(0.5, -0.5), lty = "dashed") +
geom_hline(yintercept = -log10(0.05), lty = "dashed") +
geom_point() +
labs(x = " <- log2(FC) -> ", y = "Significance, -log10(P)", color = "Significance") +
scale_color_manual(values = c(`FDR < 0.001` = "dodgerblue", `FDR < 0.05` = "lightblue",
`P < 0.05` = "orange2",`NS or FC < 0.5` = "gray"),
guide = guide_legend(override.aes = list(size = 4))) +
scale_y_continuous(expand = expansion(mult = c(0,0.05))) +
geom_text_repel(data = subset(results, Gene %in% top_g),# & FDR < 0.01),
#geom_text_repel(data = subset(results, Gene %in% features & `Pr(>|t|)` < 0.05),
size = 6, point.padding = 0.15, color = "black",
min.segment.length = .1, box.padding = .2, lwd = 2, max.overlaps = 50) +
theme_bw(base_size = 15) +
theme(legend.position = "bottom")
volc_plot
universe <- read.csv("F:/GeoMX KPC/WTA_11232022/processed_data/universePDAC.csv")
universe <- dplyr::select(universe, SYMBOL,ENTREZID)
head(universe)
load("F:/GeoMX KPC/WTA_11232022/processed_data/KPC_geoMX_exp2.RData")
GO_rosetta <- read.csv("C:/Users/edmondsonef/Desktop/GO Terms.csv")
## Create datafram of
# head(target_myData@assayData$exprs)
# head(target_myData@assayData$log_q)
# head(target_myData@assayData$q_norm)
new_dfs <- target_myData@assayData$log_q
row.names(new_dfs) <- bitr(row.names(new_dfs), fromType="SYMBOL", toType=c("ENTREZID"),OrgDb="org.Mm.eg.db")
eg <- bitr(row.names(new_dfs), fromType="SYMBOL", toType=c("ENTREZID"),OrgDb="org.Mm.eg.db")
row.names(eg) <- eg$SYMBOL
new_dfs <- merge(new_dfs, eg, by = 0)
#make entrezID the rownames
row.names(new_dfs) <- new_dfs$ENTREZID
new_dfs <- as.data.frame(new_dfs)
new_dfs <- subset(new_dfs, select = -c(Row.names, SYMBOL, ENTREZID))
rm(eg)
#Create list object containing a collection of gene sets defined as GO terms with annotated Entrez gene identifiers
goannot <- AnnotationDbi::select(org.Mm.eg.db, keys=keys(org.Mm.eg.db), columns="GO")
columns(org.Mm.eg.db)
goannot <- filter(goannot, ONTOLOGY == "BP")
genesbygo <- split(goannot$ENTREZID, goannot$GO)
length(genesbygo)
colnames(new_dfs)<-target_myData@phenoData@data$dx
head(new_dfs)
new_dfs <- as.matrix(new_dfs)
ssGSEA <- gsva(new_dfs,
genesbygo,
method="ssgsea",
min.sz = 5,
max.sz=500,
verbose=FALSE,
parallel.sz=1)
colnames(ssGSEA)
rownames(ssGSEA)
head(GO_rosetta)
rownames(GO_rosetta) <- GO_rosetta$GO_ID
ssGSEA <- merge(ssGSEA, GO_rosetta, by = 0)
row.names(ssGSEA) <- ssGSEA$GO_pathway
head(ssGSEA)
ssGSEA <- as.data.frame(ssGSEA)
ssGSEA <- subset(ssGSEA, select = -c(Row.names, GO_ID, GO_pathway))
#zscore the ssgsea output for comparative analysis
mat = (ssGSEA - rowMeans(ssGSEA))/(rowSds(as.matrix(ssGSEA)))[row(ssGSEA)]
mat <- as.data.frame(mat)
colnames(mat)
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "angiogenesis", "dendrite ", "myelin", "synapse", "neuron")
keywords <- c("angiogenesis", "hypoxia", "oxygen")
keywords <- c("p53", "apoptosis", "senescence", "cell cycle")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 5.0)
rownames(mat1)
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "angiogenesis", "dendrite ", "myelin", "synapse", "neuron")
keywords <- c("angiogenesis", "hypoxia", "oxygen")
keywords <- c("p53", "apoptosis", "senescence", "cell cycle")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 4.5)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "angiogenesis", "dendrite ", "myelin", "synapse", "neuron")
keywords <- c("angiogenesis", "hypoxia", "oxygen")
keywords <- c("p53", "apoptosis", "senescence", "cell cycle")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 4)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "angiogenesis", "dendrite ", "myelin", "synapse", "neuron")
keywords <- c("angiogenesis", "hypoxia", "oxygen")
keywords <- c("p53", "apoptosis", "senescence", "cell cycle")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 3.5)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "angiogenesis", "dendrite ", "myelin", "synapse", "neuron")
keywords <- c("angiogenesis", "hypoxia", "oxygen")
keywords <- c("p53", "apoptosis", "senescence", "cell cycle")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 3)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
#zscore the ssgsea output for comparative analysis
mat = (ssGSEA - rowMeans(ssGSEA))/(rowSds(as.matrix(ssGSEA)))[row(ssGSEA)]
mat <- as.data.frame(mat)
colnames(mat)
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "angiogenesis", "dendrite ", "myelin", "synapse", "neuron")
keywords <- c("angiogenesis", "hypoxia", "oxygen")
keywords <- c("p53", "apoptosis", "senescence", "cell cycle")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 3)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat = (ssGSEA - rowMeans(ssGSEA))/(rowSds(as.matrix(ssGSEA)))[row(ssGSEA)]
mat <- as.data.frame(mat)
colnames(mat)
#mat <- mat[,c(1,7,8,9,15,16,18,19,29,30,32,33,39,41,43,44,45,51,53,55,56,61,62,63,67,69,72,77)]
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "angiogenesis", "dendrite ", "myelin", "synapse", "neuron")
keywords <- c("angiogenesis", "hypoxia", "oxygen")
keywords <- c("p53", "apoptosis", "senescence", "cell cycle")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 2)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "angiogenesis", "dendrite ", "myelin", "synapse", "neuron")
keywords <- c("angiogenesis", "hypoxia", "oxygen")
keywords <- c("p53", "apoptosis", "senescence", "cell cycle")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
rownames(mat1)
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "angiogenesis", "dendrite ", "myelin", "synapse", "neuron")
keywords <- c("angiogenesis", "hypoxia", "oxygen")
keywords <- c("p53", "apoptosis", "senescence", "cell cycle", "superoxide")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 2)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
keywords <- c("angiogenesis", "hypoxia", "oxygen")
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "angiogenesis", "dendrite ", "myelin", "synapse", "neuron")
keywords <- c("angiogenesis", "hypoxia", "oxygen")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 2)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
colnames(mat)
#mat <- mat[,c(1,7,8,9,15,16,18,19,29,30,32,33,39,41,43,44,45,51,53,55,56,61,62,63,67,69,72,77)]
mat <- mat[,c(1,6,13,14,15,19,21,25,26,27,28,29,30,32,41,42,45,46,47,49,50,55,57,58,59,64,69,72,74)]
colnames(mat)
mat <- as.data.frame(mat)
mat <- as.matrix(mat)
mat1 <- subset(mat, (rowMax(mat) + abs(rowMin(mat))) > 5.8)
rownames(mat1)
mat <- as.matrix(mat)
mat1 <- subset(mat, (rowMax(mat) + abs(rowMin(mat))) > 5)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat <- as.matrix(mat)
mat1 <- subset(mat, (rowMax(mat) + abs(rowMin(mat))) > 4)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
#zscore the ssgsea output for comparative analysis
mat = (ssGSEA - rowMeans(ssGSEA))/(rowSds(as.matrix(ssGSEA)))[row(ssGSEA)]
mat <- as.data.frame(mat)
colnames(mat)
#mat <- mat[,c(1,7,8,9,15,16,18,19,29,30,32,33,39,41,43,44,45,51,53,55,56,61,62,63,67,69,72,77)]
mat <- mat[,c(6,13,14,15,19,21,25,26,27,28,29,30,32,41,42,45,46,47,49,50,55,57,58,59,64,69,72,74)]
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "dendrite ", "myelin", "synapse", "neuron")
keywords <- c("angiogenesis", "hypoxia", "oxygen")
keywords <- c("p53", "apoptosis", "senescence", "cell cycle", "superoxide")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 2)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
keywords <- c("angiogenesis", "hypoxia", "oxygen")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 2)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat <- as.matrix(mat)
mat1 <- subset(mat, (rowMax(mat) + abs(rowMin(mat))) > 4)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat <- as.matrix(mat)
mat1 <- subset(mat, (rowMax(mat) + abs(rowMin(mat))) > 4.5)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat <- as.matrix(mat)
mat1 <- subset(mat, (rowMax(mat) + abs(rowMin(mat))) > 4.85)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat <- as.matrix(mat)
mat1 <- subset(mat, (rowMax(mat) + abs(rowMin(mat))) > 4.7)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat <- as.matrix(mat)
mat1 <- subset(mat, (rowMax(mat) + abs(rowMin(mat))) > 4.75)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
pheatmap(mat1,
scale = "row",
show_rownames = T, show_colnames = T,
border_color = NA,
clustering_method = "average",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
#breaks = seq(-3, 3, 0.05),
#color = colorRampPalette(c("orangered", "white", "purple"))(120),
annotation_col = target_myData@phenoData@data$dx)
pheatmap(mat1,
scale = "row",
show_rownames = T, show_colnames = T,
border_color = NA,
clustering_method = "average",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
#breaks = seq(-3, 3, 0.05),
#color = colorRampPalette(c("orangered", "white", "purple"))(120),
annotation_col =
pData(target_myData)[, c("dx", "Sex","Class")])
pheatmap(mat1,
scale = "row",
show_rownames = T, show_colnames = T,
border_color = NA,
clustering_method = "average",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
#breaks = seq(-3, 3, 0.05),
#color = colorRampPalette(c("orangered", "white", "purple"))(120),
annotation_col =
pData(target_myData)[, c("dx", "Sex","class")])
pheatmap(mat1,
scale = "row",
show_rownames = T, show_colnames = T,
border_color = NA,
clustering_method = "average",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
#breaks = seq(-3, 3, 0.05),
color = colorRampPalette(c("orangered", "white", "purple"))(120),
annotation_col =
pData(target_myData)[, c("dx", "Sex","class")])
pData(target_myData)[, c("dx", "Sex"])
pheatmap(mat1,
scale = "row",
show_rownames = T, show_colnames = T,
border_color = NA,
clustering_method = "average",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
#breaks = seq(-3, 3, 0.05),
color = colorRampPalette(c("orangered", "white", "purple"))(120),
annotation_col =
pData(target_myData)[, c("dx", "Sex"]))
pheatmap(mat1,
scale = "row",
show_rownames = T, show_colnames = T,
border_color = NA,
clustering_method = "average",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
#breaks = seq(-3, 3, 0.05),
color = colorRampPalette(c("orangered", "white", "purple"))(120),
annotation_col =  pData(target_myData)[, c("dx", "Sex")])
Heatmap
mat <- as.data.frame(mat)
keywords <- c("axon","DNA", "nerve", "dendrite ", "myelin", "synapse", "neuron")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 2)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
keywords <- c("axon", "nerve", "dendrite ", "myelin", "synapse", "neuron")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 4)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 3)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 3.5)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
keywords <- c("angiogenesis", "hypoxia", "oxygen", "DNA")
mat <- as.data.frame(mat)
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 3.5)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
keywords <- c("p53", "apoptosis", "senescence", "cell cycle", "superoxide")
mat1 <- mat %>% filter(grepl(paste(keywords,collapse="|"), rownames(mat)))
rownames(mat1)
mat1 <- as.matrix(mat1)
mat1 <- subset(mat1, (rowMax(mat1) + abs(rowMin(mat1))) > 3.5)
rownames(mat1)
mat1 <- as.matrix(mat1)
Heatmap(mat1, col = colorRamp2(c(-2,0,2), c("orangered", "white", "purple")))
study = "MHL Skimune_set2"
investigator = " NCL"
#path = "F:/QuPath/MHL 230588 Stracker/export/"
path = "C:/Users/edmondsonef/Desktop/Skimune_set2/"
img.file <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)#, table.layout = "fixed")
library(officer)
library(magrittr)
library(flextable)
library(magick)
#path = "F:/QuPath/MHL 230588 Stracker/export/"
path = "C:/Users/edmondsonef/Desktop/Skimune_set2/"
img.file <- list.files(path, all.files = FALSE,#pattern = ".png",
full.names = TRUE)
img.file.name <- list.files(path, all.files = FALSE,#pattern = ".png",
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)#, table.layout = "fixed")
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"), use_loc_size = T)
#doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
sizes <- lapply(img.file[i], function(x) {
z <- magick::image_read(x)
z <- magick::image_data(z)
attr(z, "dim")[-1]
})
sizes <- do.call(rbind, sizes)
width <- sizes[, 1]/150
height <- sizes[, 2]/150
doc <- ph_with(x = doc, external_img(img.file[i], width = width, height = height, unit = "cm"),
location = ph_location_left(), use_loc_size = FALSE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
library(officer)
library(magrittr)
library(flextable)
library(magick)
study = "MHL Skimune_set3"
investigator = " NCL"
#path = "F:/QuPath/MHL 230588 Stracker/export/"
path = "C:/Users/edmondsonef/Desktop/Skimune_set3/"
img.file <- list.files(path, all.files = FALSE,#pattern = ".png",
full.names = TRUE)
img.file.name <- list.files(path, all.files = FALSE,#pattern = ".png",
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)#, table.layout = "fixed")
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"), use_loc_size = T)
#doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
sizes <- lapply(img.file[i], function(x) {
z <- magick::image_read(x)
z <- magick::image_data(z)
attr(z, "dim")[-1]
})
sizes <- do.call(rbind, sizes)
width <- sizes[, 1]/150
height <- sizes[, 2]/150
doc <- ph_with(x = doc, external_img(img.file[i], width = width, height = height, unit = "cm"),
location = ph_location_left(), use_loc_size = FALSE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
Manifest <- list.files(path = path, #pattern = "-a.png",
all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
View(Manifest)
study = "MHL Skimune_set2"
investigator = " NCL"
#path = "F:/QuPath/MHL 230588 Stracker/export/"
path = "C:/Users/edmondsonef/Desktop/Skimune_set2/"
img.file <- list.files(path, all.files = FALSE,#pattern = ".png",
full.names = TRUE)
img.file.name <- list.files(path, all.files = FALSE,#pattern = ".png",
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, #pattern = "-a.png",
all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
View(Manifest)
