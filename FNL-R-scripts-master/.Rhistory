`P < 0.05` = "orange2",`NS or FC < 0.5` = "gray"),
guide = guide_legend(override.aes = list(size = 4))) +
scale_y_continuous(expand = expansion(mult = c(0,0.05))) +
#geom_text_repel(data = subset(gene, Gene %in% top_g & FDR < 0.01),
geom_text_repel(data = subset(gene, Gene %in% goi & FDR < 0.05),
size = 6, point.padding = 0.15, color = "black",
min.segment.length = .1, box.padding = .2, lwd = 2,
max.overlaps = 50) +
theme_bw(base_size = 15) +
theme(legend.position = "bottom")
avp1
# Graph results
avp1 <- ggplot(gene,                                                             ###CHANGE
aes(x = Estimate1, y = -log10(`Pr(>|t|)`),
color = Color, label = Gene)) +
geom_vline(xintercept = c(0.5, -0.5), lty = "dashed") +
geom_hline(yintercept = -log10(0.05), lty = "dashed") +
geom_point() +
labs(x = "PanIN <- log2(FC) -> PDAC",                                       ###CHANGE
y = "Significance, -log10(P)",
color = "Significance") +
scale_color_manual(values = c(`FDR < 0.001` = "dodgerblue", `FDR < 0.05` = "lightblue",
`P < 0.05` = "orange2",`NS or FC < 0.5` = "gray"),
guide = guide_legend(override.aes = list(size = 4))) +
scale_y_continuous(expand = expansion(mult = c(0,0.05))) +
geom_text_repel(data = subset(gene, Gene %in% top_g & FDR < 0.01),
#geom_text_repel(data = subset(gene, Gene %in% goi & FDR < 0.05),
size = 6, point.padding = 0.15, color = "black",
min.segment.length = .1, box.padding = .2, lwd = 2,
max.overlaps = 50) +
theme_bw(base_size = 15) +
theme(legend.position = "bottom")
avp1
goi <- c("Cckar","Slit3","Etv1","Sema7a","Cxcr4","Kif5c","Ptprm",
"Ptprs","Bsg","Smad4","Bcl2","Trak1","Ptch1","
Islr2","Taok2","Cdkl3","Actb","Ednra","Pip5k1c",
"Sptbn4","Lama5","Ablim1","Rtn4","Wnt7b","Spg11","
Golga4","Dock7","Ephb2","Cacna1a","Ptpn11","B4gat1",
"Smo","B4galt6","Rab3a","Ntrk3","Neo1","Lrp1",
"Atp5g1","Kif5b","Brsk2","Erbb2","Map1a","Flrt2",
"Tsku","Map1s","Chrnb2","Fstl4","Lrp4","Dag1","Sin3a",
"Mapk8ip3","Dclk1","Adnp","Celsr3","Rpl4","Tubb2b",
"Efna5","Plxnb2","Ngf","Ache","Vim","Flrt3","Fgfr2","
Ephb4","Flot1","Sema4c","Gsk3b","Sema3d","Aatk","Cdh4",
"Tubb3","Agrn","Evl","Brsk1","Notch3","Fzd3",
"Hsp90aa1","Nrn1","Bcl11a","Sema4g","Lama3","Epha8",
"Ntn5","Amigo1","Apbb1","Mgll","Ret","Atp8a2","
Alcam","Unc5a","Grin1","Cntn6","Wnt7a","Pou4f3","Shh")
# Graph results
avp1 <- ggplot(gene,                                                             ###CHANGE
aes(x = Estimate1, y = -log10(`Pr(>|t|)`),
color = Color, label = Gene)) +
geom_vline(xintercept = c(0.5, -0.5), lty = "dashed") +
geom_hline(yintercept = -log10(0.05), lty = "dashed") +
geom_point() +
labs(x = "PanIN <- log2(FC) -> PDAC",                                       ###CHANGE
y = "Significance, -log10(P)",
color = "Significance") +
scale_color_manual(values = c(`FDR < 0.001` = "dodgerblue", `FDR < 0.05` = "lightblue",
`P < 0.05` = "orange2",`NS or FC < 0.5` = "gray"),
guide = guide_legend(override.aes = list(size = 4))) +
scale_y_continuous(expand = expansion(mult = c(0,0.05))) +
geom_text_repel(data = subset(gene, Gene %in% top_g & FDR < 0.01),
#geom_text_repel(data = subset(gene, Gene %in% goi & FDR < 0.05),
size = 6, point.padding = 0.15, color = "black",
min.segment.length = .1, box.padding = .2, lwd = 2,
max.overlaps = 50) +
theme_bw(base_size = 15) +
theme(legend.position = "bottom")
avp1
# Graph results
avp1 <- ggplot(gene,                                                             ###CHANGE
aes(x = Estimate1, y = -log10(`Pr(>|t|)`),
color = Color, label = Gene)) +
geom_vline(xintercept = c(0.5, -0.5), lty = "dashed") +
geom_hline(yintercept = -log10(0.05), lty = "dashed") +
geom_point() +
labs(x = "PanIN <- log2(FC) -> PDAC",                                       ###CHANGE
y = "Significance, -log10(P)",
color = "Significance") +
scale_color_manual(values = c(`FDR < 0.001` = "dodgerblue", `FDR < 0.05` = "lightblue",
`P < 0.05` = "orange2",`NS or FC < 0.5` = "gray"),
guide = guide_legend(override.aes = list(size = 4))) +
scale_y_continuous(expand = expansion(mult = c(0,0.05))) +
#geom_text_repel(data = subset(gene, Gene %in% top_g & FDR < 0.01),
geom_text_repel(data = subset(gene, Gene %in% goi & FDR < 0.05),
size = 6, point.padding = 0.15, color = "black",
min.segment.length = .1, box.padding = .2, lwd = 2,
max.overlaps = 50) +
theme_bw(base_size = 15) +
theme(legend.position = "bottom")
avp1
goi <- c("Rock2","Ephb2","Efnb2", "Adam10", "Mmp2", "Mmp9", "Rhof",
"Nrxn1", "Nrxn2", "Nrxn3", "Nrp2", "Sema3e",
"Lama5", "Itgb1", "Ezr", "Smad4", "Gsto1", "Gkn1",
"Lypd8l", "Anxa2", "Cdh1", "Prom1", "Myrf",
"Flna", "Slc12a2", "Actn1", "Fn1", "Hnf1b",
"Vasp","Vdac2", "Syncrip", "Rpl5", "Pard3",
"Dync1i2", "Calm1", "Calm2", "Calm3", "Itgb1",
"Kras","Trp53","Net1","Nt5c2","Ezr","Clu","S100a6",
"Anxa2", "Myrf", "Sema4b","Sema4g","Efnb2",
"Flna", "Slc12a2", "Actn1", "Actb","Tuba1b",
"Vasp", "Syncrip", "Pard3","Rock2","Rac1", "Rhoa", "Cdc42",
"Dync1i2", "Calm1", "Calm2", "Calm3","Lama5", "Itgb1",
"Lama5", "Itgb1", "Itgb4", "Itga6", "Sdc1","Muc3a","Msln",
"Sema3f", "Nrp1","Sema7a","Sema3e","Sema4a","Sema4b","Sema4g",
"Efnb2", "Myo5b","Rock2", "Rhoa","Rhoc","Rac1","Cdc42", "Vcam1", "Ezr",
"Calm1", "Calm2", "Calm3", "Actb", "Efnb2","Flna","Lamb2","Picalm",
"Ablim1","Plxnb2","Erbb2","Dock7")
# Graph results
avp1 <- ggplot(gene,                                                             ###CHANGE
aes(x = Estimate1, y = -log10(`Pr(>|t|)`),
color = Color, label = Gene)) +
geom_vline(xintercept = c(0.5, -0.5), lty = "dashed") +
geom_hline(yintercept = -log10(0.05), lty = "dashed") +
geom_point() +
labs(x = "PanIN <- log2(FC) -> PDAC",                                       ###CHANGE
y = "Significance, -log10(P)",
color = "Significance") +
scale_color_manual(values = c(`FDR < 0.001` = "dodgerblue", `FDR < 0.05` = "lightblue",
`P < 0.05` = "orange2",`NS or FC < 0.5` = "gray"),
guide = guide_legend(override.aes = list(size = 4))) +
scale_y_continuous(expand = expansion(mult = c(0,0.05))) +
#geom_text_repel(data = subset(gene, Gene %in% top_g & FDR < 0.01),
geom_text_repel(data = subset(gene, Gene %in% goi & FDR < 0.05),
size = 6, point.padding = 0.15, color = "black",
min.segment.length = .1, box.padding = .2, lwd = 2,
max.overlaps = 50) +
theme_bw(base_size = 15) +
theme(legend.position = "bottom")
avp1
library(officer)
library(magrittr)
library(flextable)
study = "Stracker 223207A"
investigator = " Stracker"
#path = "F:/QuPath/MHL 231233 Aurigemma/export/"
path = "C:/Users/edmondsonef/Desktop/Stracker 223207A/"
img.file <- list.files(path, pattern = ".jpg", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(study), location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
img.file.name
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = ".jpg", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(study), location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
img.file.name[i]
img.file.name <- list.files(path, pattern = ".jpg", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = ".jpg", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(study), location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
paste("slide",i)
paste(img.file.name[i])
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = ".jpg", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
library(officer)
library(magrittr)
library(flextable)
study = "MHL 230234"
investigator = " Stracker"
path = "F:/QuPath/MHL 230234 Stracker/export/"
img.file <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(study), location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
study = "MHL 230234"
investigator = " Stracker"
path = "F:/QuPath/MHL 230234 Stracker/export/"
img.file <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"))
#doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
library(officer)
library(magrittr)
library(flextable)
study = "MHL 231335"
investigator = " Ho"
path = "F:/QuPath/MHL 231335 Ho/export/"
img.file <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = TRUE)
img.file.name <- list.files(path, pattern = ".png", all.files = FALSE,
full.names = FALSE)
number <- length(img.file)
doc <- read_pptx()
doc <- add_slide(doc, layout = "Title and Content")#, master = "Office Theme")
doc <- ph_with(doc, value = study, location = ph_location_type(type = "title"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = "Manifest", location = ph_location_type(type = "sldNum"))
Manifest <- list.files(path = path, pattern = "-a.png", all.files = FALSE, full.names = TRUE)
Manifest <- as.data.frame(Manifest)
set_flextable_defaults(font.size = 8, theme_fun = theme_booktabs, padding = 1)
ft <- flextable(Manifest)
ft <- autofit(ft)
doc <- ph_with(x = doc, ft, location = ph_location_type(type = "body") )
for(i in 1:number) {
doc <- add_slide(doc)
doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "title"))
#doc <- ph_with(doc, value = paste(img.file.name[i]), location = ph_location_type(type = "ftr"))
doc <- ph_with(doc, value = format(Sys.Date()), location = ph_location_type(type = "dt"))
doc <- ph_with(doc, value = paste("slide",i), location = ph_location_type(type = "sldNum"))
doc <- ph_with(x = doc, external_img(img.file[i]), location = ph_location_type(type = "body"), use_loc_size = TRUE)
}
print(doc, target = paste0("C:/Users/edmondsonef/Desktop/",study,investigator,".pptx"))
library(qtl2)
library(devtools)
library(yaml)
library(jsonlite)
library(data.table)
library(RcppEigen)
library(RSQLite)
library(qtl)
library(qtl2convert)
library(qtl2)
library(devtools)
library(yaml)
library(jsonlite)
library(data.table)
library(RcppEigen)
library(RSQLite)
library(qtl)
library(qtl2convert)
#load(url("ftp://ftp.jax.org/MUGA/MM_snps.Rdata"))
load("C:/Users/edmondsonef/Desktop/QTL/Rqtl2 Files/HZE-001_qtl2.RData")
View(pheno)
data <- read_excel("C:/Users/edmondsonef/Desktop/Cataract/CATARACT_final.xlsx", sheet ="CATARACT_fin")
library(readxl)
data <- read_excel("C:/Users/edmondsonef/Desktop/Cataract/CATARACT_final.xlsx", sheet ="CATARACT_fin")
Total <- data
pheno = data.frame(row.names = Total$row.names, #sex = as.numeric(Total$sex == "F"),
albino = as.numeric(Total$`coat color`=="albino"))
pheno = data.frame(row.names = Total$row.names, sex = as.numeric(Total$sex == "F"),
albino = as.numeric(Total$`coat color`=="albino"),
cat = as.numeric(Total$cat_score))
addcovar = matrix(pheno$sex, ncol = 1, dimnames = list(rownames(pheno), "sex"))
pheno$albino
out_albino <- scan1(genoprobs = probs, pheno = pheno$albino, kinship = K, addcovar = addcovar, cores=3)
pheno = data.frame(row.names = Total$row.names, #sex = as.numeric(Total$sex == "F"),
albino = as.numeric(Total$`coat color`=="albino"))#,
out_albino <- scan1(genoprobs = probs, pheno = pheno, kinship = K, addcovar = addcovar, cores=3)
out_albino <- scan1(genoprobs = probs, pheno = pheno, kinship = K, addcovar = addcovar, cores=3)
#load("C:/Users/edmondsonef/Desktop/QTL/CAT_QTLproject_2022.Rdata")
load("C:/Users/edmondsonef/Desktop/QTL/HS_qtl2_probs_K.RData")
#load("C:/Users/edmondsonef/Desktop/QTL/CAT_QTLproject_2022.Rdata")
load("C:/Users/edmondsonef/Desktop/QTL/HZEproject.RData")
pheno <- read_excel("C:/Users/edmondsonef/Desktop/Cataract/CATARACT_final.xlsx", sheet ="CATARACT_fin")
Total <- pheno
pheno = data.frame(row.names = Total$row.names, sex = as.numeric(Total$sex == "F"),
albino = as.numeric(Total$`coat color`=="albino"),
cat = as.numeric(Total$cat_score),
days = as.numeric(Total$days))
addcovar = matrix(pheno$sex, ncol = 1, dimnames = list(rownames(pheno), "sex"))
library(qtl2convert)
library(qtl2)
base_dir  = 'C:/Users/edmondsonef/Desktop/QTL/Rqtl2 Files/'
#src_file  = file.path(base_dir, 'HZE-001.Rdata')
dest_file = file.path(base_dir, 'HZE-EFE_qtl2.Rdata')
new_probs = qtl2convert::probs_doqtl_to_qtl2(probs = probs, map = markers,
chr_column = 'Chr', pos_column = 'cM',
marker_column = 'SNP_ID')
K = calc_kinship(probs = new_probs, type = 'loco')
save(pheno, new_probs, K, markers, file = dest_file)
load("C:/Users/edmondsonef/Desktop/QTL/Rqtl2 Files/HZE-EFE_qtl2.RData")
out_albino <- scan1(genoprobs = new_probs, pheno = pheno, kinship = K, addcovar = addcovar, cores=3)
addcovar = matrix(pheno$sex, ncol = 1, dimnames = list(rownames(pheno), "sex"))
out_albino <- scan1(genoprobs = new_probs, pheno = pheno, kinship = K, addcovar = addcovar, cores=3)
pheno_alb = data.frame(row.names = Total$row.names, albino = as.numeric(Total$`coat color`=="albino"))
pheno_alb = data.frame(row.names = pheno$row.names, albino = as.numeric(pheno$`coat color`=="albino"))
pheno_alb = data.frame(row.names = pheno$row.names, albino = as.numeric(pheno$`ablino`=="1"))
pheno_alb = data.frame(row.names = pheno$row.names, albino = as.numeric(pheno$`ablino`))
pheno$`ablino`
pheno_alb = data.frame(row.names = pheno$row.names, albino = as.numeric(pheno$`albino`))
out_albino <- scan1(genoprobs = new_probs, pheno = pheno, kinship = K, addcovar = addcovar, cores=3)
out_albino <- scan1(genoprobs = new_probs, pheno = pheno_alb, kinship = K, addcovar = addcovar, cores=3)
pheno$row.names
head(pheno)
out_albino <- scan1(genoprobs = new_probs, pheno = pheno$albino, kinship = K, addcovar = addcovar, cores=3)
pheno$albino
out_albino <- scan1(genoprobs = new_probs,
pheno = pheno,
kinship = K,
addcovar = addcovar, cores=3)
par(mar=c(5.1, 4.1, 1.1, 1.1))
ymx <- maxlod(out_albino) # overall maximum LOD score
plot(out_albino, map = markers, lodcolumn=1, col="slateblue", ylim=c(0, ymx*1.02))
legend("topleft", lwd=2, col=c("slateblue", "violetred"), colnames(out_albino), bg="gray90")
plot(out_albino)#, map = markers, lodcolumn=1, col="slateblue", ylim=c(0, ymx*1.02))
ymx <- maxlod(out_albino) # overall maximum LOD score
plot(out_albino)#, map = markers, lodcolumn=1, col="slateblue", ylim=c(0, ymx*1.02))
plot(out_albino, map = markers)#, lodcolumn=1, col="slateblue", ylim=c(0, ymx*1.02))
plot(out_albino, map = markers, lodcolumn=1)#, col="slateblue", ylim=c(0, ymx*1.02))
plot_scan1(out_albino)
plot_scan1(out_albino,map = markers)
find_peaks(out_albino, map, threshold=4, drop=1.5)
find_peaks(out_albino, map, threshold=40, drop=1.5)
find_peaks(out_albino, map= markers, threshold=40, drop=1.5)
find_peaks(out_albino, map= markers$SNP_ID, threshold=40, drop=1.5)
map <- insert_pseudomarkers(pheno, step=1)
plot(out_albino, map, lodcolumn=1, col="slateblue", ylim=c(0, ymx*1.02))
map <- insert_pseudomarkers(markers, step=1)
map <- insert_pseudomarkers(markers$SNP_ID, step=1)
maxlod(out_albino)
map <- dplyr::select(markers, Chr, cM)
find_peaks(out_albino, map= map, threshold=40, drop=1.5)
map <- dplyr::select(markers,SNP_ID,Chr, cM)
find_peaks(out_albino, map= map, threshold=40, drop=1.5)
map <- map %>% rename("SNP_ID" = "markers")
library(dplyr)
map <- map %>% rename("SNP_ID" = "markers")
names(map)[1]
names(map)[1] = "marker"
find_peaks(out_albino, map= map, threshold=40, drop=1.5)
find_peaks(out_albino, map= map, threshold=20, drop=1.5)
out_albino
head(out_albino)
head(map)
names(map)[2] = "chr"
names(map)[3] = "pos"
find_peaks(out_albino, map= map, threshold=20, drop=1.5)
ymx <- maxlod(out_albino[2]) # overall maximum LOD score
ymx <- maxlod(out_albino[3]) # overall maximum LOD score
ymx <- maxlod(out_albino[4]) # overall maximum LOD score
ymx <- maxlod(out_albino[5]) # overall maximum LOD score
ymx <- maxlod(out_albino[66]) # overall maximum LOD score
ymx <- maxlod(out_albino[,2]) # overall maximum LOD score
out_albino[,2]
head(out_albino[,2])
ymx <- maxlod(out_albino[,3]) # overall maximum LOD score
head(out_albino)
ymx <- maxlod(out_albino[,4]) # overall maximum LOD score
ymx <- maxlod(out_albino[,5]) # overall maximum LOD score
ymx <- maxlod(out_albino[,1]) # overall maximum LOD score
ymx <- maxlod(out_albino[,2]) # overall maximum LOD score
ymx <- maxlod(out_albino[,3]) # overall maximum LOD score
ymx <- maxlod(out_albino[,4]) # overall maximum LOD score
ymx <- maxlod(out_albino[,3]) # overall maximum LOD score
find_peaks(out_albino[,3], map= map, threshold=20, drop=1.5)
find_peaks(out_albino[,3], map= map, threshold=7, drop=1.5)
head(out_albino)
head(map)
rownames(map) <- map$marker
head(map)
find_peaks(out_albino[,3], map= map, threshold=7, drop=1.5)
head(out_albino)
head(map)
map <- dplyr::select(markers,SNP_ID,Chr, cM)
rownames(map) <- map$marker
map <- dplyr::select(markers,Chr, cM)
rownames(map) <- markers$SNP_ID
head(map)
find_peaks(out_albino[,3], map= map, threshold=7, drop=1.5)
names(map)[1] = "chr"
names(map)[2] = "pos"
head(out_albino)
head(map)
find_peaks(out_albino[,3], map= map, threshold=7, drop=1.5)
find_peaks(out_albino, map= map, threshold=7, drop=1.5)
head(out_albino)
head(map)
find_peaks(out_albino, map= map, threshold=7, drop=1.5)
maxlod(out_albino[,3])
maxlod(out_albino[,2])
load("C:/Users/edmondsonef/Desktop/QTL/Rqtl2 Files/HZE-EFE_qtl2.RData")
addcovar = matrix(pheno$sex, ncol = 1, dimnames = list(rownames(pheno), "sex"))
pheno$row.names
head(pheno)
pheno$`albino`
pheno_a = data.frame(row.names = pheno$row.names, albino = as.numeric(pheno$`albino`))
head(pheno_a)
pheno$row.names
head(pheno)
row.names(pheno)
pheno_a = data.frame(row.names = row.names(pheno), albino = as.numeric(pheno$`albino`))
head(pheno_a)
map = qtl2convert::map_df_to_list(markers, chr_column = "chr", pos_column = "pos", marker_column = "marker")
library(qtl2)
head(markers)
markers$bp
markers$pos = markers$Mb_NCBI38
map = qtl2convert::map_df_to_list(markers, chr_column = "Chr", pos_column = "pos", marker_column = "SNP_ID")
library(qtl2convert)
install.packages(c("qtl2", "devtools", "yaml", "jasonlite", "qtl", "qtl2convert", "readxl", "dplyr"))
library(qtl2)
install.packages("BiocManager")
library(qtl2)
library(qtl2)
library(devtools)
library(yaml)
library(jsonlite)
library(data.table)
install.packages("BiocManager")''
install.packages("BiocManager")
BiocManager::install(c("GenomicRanges", "Organism.dplyr"))
install.packages("BiocManager")
